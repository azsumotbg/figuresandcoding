import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class FileEditor {
    private static List<String> fileContent; // Holds the content of the currently opened file
    private static String currentFileName; // Stores the name of the currently opened file

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        fileContent = new ArrayList<>();
        currentFileName = "";

        while (true) {
            System.out.print("Enter a command: ");
            String input = scanner.nextLine();
            String[] commandParts = input.split(" ");

            String command = commandParts[0];
            String[] commandArgs = new String[commandParts.length - 1];
            System.arraycopy(commandParts, 1, commandArgs, 0, commandArgs.length);

            executeCommand(command, commandArgs);
        }
    }

    private static void executeCommand(String command, String[] args) {
        switch (command) {
            case "open":
                if (args.length != 1) {
                    System.out.println("Invalid command. Usage: open <filename>");
                    break;
                }
                openFile(args[0]);
                break;
            case "save":
                if (currentFileName.isEmpty()) {
                    System.out.println("No file is currently open.");
                    break;
                }
                saveFile(currentFileName);
                break;
            case "saveas":
                if (args.length != 1) {
                    System.out.println("Invalid command. Usage: saveas <filename>");
                    break;
                }
                saveFile(args[0]);
                break;
            case "close":
                if (currentFileName.isEmpty()) {
                    System.out.println("No file is currently open.");
                    break;
                }
                closeFile();
                break;
            case "exit":
                System.exit(0);
                break;
            default:
                System.out.println("Invalid command.");
        }
    }

    private static void openFile(String fileName) {
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            fileContent.clear(); // Clear the previous file content
            String line;
            while ((line = reader.readLine()) != null) {
                fileContent.add(line); // Read each line and add it to the fileContent list
            }
            currentFileName = fileName; // Set the current file name to the opened file
            System.out.println("File opened: " + fileName);
        } catch (IOException e) {
            // If the file doesn't exist, create a new file
            fileContent.clear(); // Clear the previous file content
            currentFileName = fileName; // Set the current file name to the new file
            System.out.println("New file created: " + fileName);
        }
    }

    private static void saveFile(String fileName) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            for (String line : fileContent) {
                writer.write(line); // Write each line from fileContent to the file
                writer.newLine(); // Add a new line after each line
            }
            writer.flush(); // Flush the writer to ensure all content is written
            System.out.println("Successfully saved " + fileName);
        } catch (IOException e) {
            System.out.println("Error saving file: " + e.getMessage());
        }
    }

    private static void closeFile() {
        fileContent.clear(); // Clear the file content
        currentFileName = ""; // Set the current file name to empty
        System.out.println("File closed.");
    }
}
